{"version":3,"sources":["services/CourseDataService.js","components/ListCourses.conf.js","components/ListCourses.js","components/CourseCard/CourseCard.js","components/Course.js","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","axios","get","id","course","post","delete","columns","title","field","render","rowData","src","courseImageUrl","style","width","ListCourses","useState","courses","setData","history","useHistory","useEffect","CourseDataService","retrieveAllCourses","then","response","data","className","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","courseId","length","addNewCourse","onRowUpdate","oldData","dataUpdate","tableData","updateCourse","onRowDelete","dataDelete","index","splice","deleteCourse","options","actionsColumnIndex","paging","onRowClick","event","push","CourseCard","alt","courseName","courseAuthor","courseAuthorMail","withRouter","props","match","params","getCourseById","display","justifyContent","App","href","textDecoration","exact","path","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51009353.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst COURSE_API_URL = \"http://localhost:8080\";\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/courses/`;\n\nclass CourseDataService {\n  retrieveAllCourses() {\n    return axios.get(`${INSTRUCTOR_API_URL}/all`);\n  }\n  getCourseById(id) {\n    return axios.get(`${INSTRUCTOR_API_URL}/course?id=`+id);\n  }\n  addNewCourse(course) {\n    return axios.post(`${INSTRUCTOR_API_URL}/addCourse`, course);\n  }\n  updateCourse(course) {\n    return axios.post(`${INSTRUCTOR_API_URL}/updateCourse`, course);\n  }\n  deleteCourse(id) {\n    return axios.delete(`${INSTRUCTOR_API_URL}/deleteCourse?courseId=`+id)\n  }\n}\n\nexport default new CourseDataService();\n","import React from \"react\";\n\nexport const columns = [\n        { title: '', field: 'courseImageUrl', render: rowData => <img src={rowData.courseImageUrl} style={{width: 40}}/> },\n        { title: 'Name', field: 'courseName' },\n        { title: 'Author', field: 'courseAuthor' },\n        { title: 'Author Mail', field: 'courseAuthorMail'}\n]\n      \n\nexport const addNewCourse = (newData,setData,CourseDataService,courses) => {\n     return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              newData={...newData,courseId:courses.length*2+100}\n              setData([...courses, newData]);\n              CourseDataService.addNewCourse({\n                ...newData,\n                courseId: courses.length*2+100\n              })\n              resolve();\n            }, 1000)\n          })\n}\n\nexport const updateCourse = (newData,oldData,setData,CourseDataService,courses) => {\n     return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataUpdate = [...courses];\n              const index = oldData.tableData.id;\n              dataUpdate[index] = newData;\n              setData([...dataUpdate]);\n              CourseDataService.updateCourse(newData)\n              resolve();\n            }, 1000)\n          })\n}\n\nexport const deleteCourse = (oldData,setData,CourseDataService,courses) => {\n     return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...courses];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              setData([...dataDelete]);\n              CourseDataService.deleteCourse(oldData.courseId);\n              resolve()\n            }, 1000)\n          })\n}","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport CourseDataService from \"../services/CourseDataService\";\nimport {columns,addNewCourse,updateCourse,deleteCourse } from \"./ListCourses.conf\"\nimport MaterialTable from 'material-table';\n\nexport const ListCourses = () => {\n  let [courses, setData] = useState(null);\n  let history = useHistory();\n\n  useEffect(() => {\n    CourseDataService.retrieveAllCourses().then((response) => {\n      !courses && setData(response.data);\n    });\n  });\n   const handleRowClick = (event, rowData) => {\n      history.push(\"/course/\"+rowData.courseId)\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"container\">\n       {courses && <MaterialTable\n            title=\"Courses\"\n            columns={columns}\n            data={courses}\n            editable={{\n              onRowAdd: newData => addNewCourse(newData,setData,CourseDataService,courses),\n              onRowUpdate: (newData,oldData) => updateCourse(newData,oldData,setData,CourseDataService,courses),\n              onRowDelete: oldData => deleteCourse(oldData,setData,CourseDataService,courses),\n                }}    \n            options={{\n              actionsColumnIndex: -1,\n              paging : false\n            }}\n            onRowClick={handleRowClick}\n      />}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport \"./CourseCard.css\"\n\n\nexport const CourseCard = ({ course }) => {\n     return <div className=\"card\">\n          <img src={course.courseImageUrl} alt=\"Avatar\" style={{width:450}}/>\n               <div className=\"container\">\n               <h4><b>{course.courseName}</b></h4> \n               <p>Author: {course.courseAuthor} </p> \n               <p>Mail: {course.courseAuthorMail}</p>\n               </div>\n          </div>\n}\n\n","import React, {useState,useEffect} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport CourseDataService from \"../services/CourseDataService\";\nimport { CourseCard } from './CourseCard/CourseCard';\n\nconst Course = (props) => {\n\n     const { id } = props.match.params;\n     let [course, setData] = useState(null);\n     useEffect(() => {\n          CourseDataService.getCourseById(id).then((response) => {\n               !course && setData(response.data);\n          });\n     }, [course]);\n     \n     return course ? <div style={{ display: \"flex\",justifyContent:\"center\"}}>\n          <CourseCard course={course}/>\n     </div> : <div>Loading ... </div>\n}\n\n\nexport default withRouter(Course);","import React from \"react\";\nimport \"./App.css\";\nimport { ListCourses } from \"./components/ListCourses\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport  Course  from './components/Course';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>\n        <a href=\"/\" style={{ textDecoration: \"none\" }}>\n          My Courses\n        </a>\n      </h2>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <ListCourses />\n          </Route>\n          <Route exact path=\"/course/:id\">\n            <Course />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}